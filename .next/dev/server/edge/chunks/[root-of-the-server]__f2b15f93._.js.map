{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { withAuth } from \"next-auth/middleware\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { Role } from \"@prisma/client\";\r\n\r\nexport default withAuth(\r\n  function middleware(req) {\r\n    const token = req.nextauth.token;\r\n    const path = req.nextUrl.pathname;\r\n\r\n    // Admin-only routes\r\n    if (\r\n      path.startsWith(\"/admin\") ||\r\n      path.startsWith(\"/panel/admin\") ||\r\n      path.startsWith(\"/(admin)\")\r\n    ) {\r\n      if (token?.role !== Role.ADMIN) {\r\n        return NextResponse.redirect(new URL(\"/panel\", req.url));\r\n      }\r\n    }\r\n\r\n    // Staff or Admin routes\r\n    if (\r\n      path.startsWith(\"/panel/randevular\") ||\r\n      path.startsWith(\"/panel/odemeler\") ||\r\n      path.startsWith(\"/panel/raporlar\") ||\r\n      path.startsWith(\"/randevular\")\r\n    ) {\r\n      if (token?.role !== Role.STAFF && token?.role !== Role.ADMIN) {\r\n        return NextResponse.redirect(new URL(\"/panel\", req.url));\r\n      }\r\n    }\r\n\r\n    return NextResponse.next();\r\n  },\r\n  {\r\n    callbacks: {\r\n      authorized: ({ token, req }) => {\r\n        const path = req.nextUrl.pathname;\r\n\r\n        // Public routes - no auth required\r\n        if (\r\n          path.startsWith(\"/auth\") ||\r\n          path.startsWith(\"/api/auth\") ||\r\n          path.startsWith(\"/api/appointments\") ||\r\n          path === \"/\" ||\r\n          path.startsWith(\"/randevu\") ||\r\n          path.startsWith(\"/takip\") ||\r\n          path.startsWith(\"/galeri\") ||\r\n          path.startsWith(\"/degerlendirme\")\r\n        ) {\r\n          return true;\r\n        }\r\n\r\n        // Protected routes - require auth\r\n        return !!token;\r\n      },\r\n    },\r\n    pages: {\r\n      signIn: \"/auth/giris\",\r\n    },\r\n  }\r\n);\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder\r\n     */\r\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;AACA;;;;uCAEe,IAAA,0QAAQ,EACrB,SAAS,WAAW,GAAG;IACrB,MAAM,QAAQ,IAAI,QAAQ,CAAC,KAAK;IAChC,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ;IAEjC,oBAAoB;IACpB,IACE,KAAK,UAAU,CAAC,aAChB,KAAK,UAAU,CAAC,mBAChB,KAAK,UAAU,CAAC,aAChB;QACA,IAAI,OAAO,SAAS,oQAAI,CAAC,KAAK,EAAE;YAC9B,OAAO,+SAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;IACF;IAEA,wBAAwB;IACxB,IACE,KAAK,UAAU,CAAC,wBAChB,KAAK,UAAU,CAAC,sBAChB,KAAK,UAAU,CAAC,sBAChB,KAAK,UAAU,CAAC,gBAChB;QACA,IAAI,OAAO,SAAS,oQAAI,CAAC,KAAK,IAAI,OAAO,SAAS,oQAAI,CAAC,KAAK,EAAE;YAC5D,OAAO,+SAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;IACF;IAEA,OAAO,+SAAY,CAAC,IAAI;AAC1B,GACA;IACE,WAAW;QACT,YAAY,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE;YACzB,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ;YAEjC,mCAAmC;YACnC,IACE,KAAK,UAAU,CAAC,YAChB,KAAK,UAAU,CAAC,gBAChB,KAAK,UAAU,CAAC,wBAChB,SAAS,OACT,KAAK,UAAU,CAAC,eAChB,KAAK,UAAU,CAAC,aAChB,KAAK,UAAU,CAAC,cAChB,KAAK,UAAU,CAAC,mBAChB;gBACA,OAAO;YACT;YAEA,kCAAkC;YAClC,OAAO,CAAC,CAAC;QACX;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF;AAGK,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}
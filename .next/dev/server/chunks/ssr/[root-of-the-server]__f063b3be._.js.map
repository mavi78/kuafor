{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/validation/auth.ts"],"sourcesContent":["import { z } from 'zod'\r\n\r\n/**\r\n * Sign-in schema with email and password validation.\r\n * Used for login forms.\r\n */\r\nexport const signInSchema = z.object({\r\n  email: z\r\n    .string()\r\n    .min(1, { message: 'E-posta adresi gereklidir' })\r\n    .email({ message: 'Geçerli bir e-posta adresi giriniz' }),\r\n  password: z\r\n    .string()\r\n    .min(1, { message: 'Şifre gereklidir' })\r\n    .min(6, { message: 'Şifre en az 6 karakter olmalıdır' }),\r\n})\r\n\r\nexport type SignInInput = z.infer<typeof signInSchema>\r\n\r\n/**\r\n * Sign-up schema with name, email, phone, and password validation.\r\n * Used for customer self-registration.\r\n */\r\nexport const signUpSchema = z.object({\r\n  name: z\r\n    .string()\r\n    .min(1, { message: 'Ad soyad gereklidir' })\r\n    .min(2, { message: 'Ad soyad en az 2 karakter olmalıdır' }),\r\n  email: z\r\n    .string()\r\n    .min(1, { message: 'E-posta adresi gereklidir' })\r\n    .email({ message: 'Geçerli bir e-posta adresi giriniz' }),\r\n  phone: z\r\n    .string()\r\n    .optional()\r\n    .refine(\r\n      (val) => !val || /^(\\+90|0)?5\\d{9}$/.test(val.replace(/\\s/g, '')),\r\n      { message: 'Geçerli bir telefon numarası giriniz (örn: 5551234567)' }\r\n    ),\r\n  password: z\r\n    .string()\r\n    .min(1, { message: 'Şifre gereklidir' })\r\n    .min(6, { message: 'Şifre en az 6 karakter olmalıdır' }),\r\n  confirmPassword: z.string().min(1, { message: 'Şifre tekrarı gereklidir' }),\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: 'Şifreler eşleşmiyor',\r\n  path: ['confirmPassword'],\r\n})\r\n\r\nexport type SignUpInput = z.infer<typeof signUpSchema>\r\n\r\n/**\r\n * Password reset request schema.\r\n * Used for initiating password reset flow.\r\n */\r\nexport const passwordResetRequestSchema = z.object({\r\n  email: z\r\n    .string()\r\n    .min(1, { message: 'E-posta adresi gereklidir' })\r\n    .email({ message: 'Geçerli bir e-posta adresi giriniz' }),\r\n})\r\n\r\nexport type PasswordResetRequestInput = z.infer<typeof passwordResetRequestSchema>\r\n\r\n/**\r\n * Password reset confirmation schema.\r\n * Used for completing password reset with token.\r\n */\r\nexport const passwordResetConfirmSchema = z.object({\r\n  token: z.string().min(1, { message: 'Token gereklidir' }),\r\n  password: z\r\n    .string()\r\n    .min(1, { message: 'Şifre gereklidir' })\r\n    .min(6, { message: 'Şifre en az 6 karakter olmalıdır' }),\r\n  confirmPassword: z.string().min(1, { message: 'Şifre tekrarı gereklidir' }),\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: 'Şifreler eşleşmiyor',\r\n  path: ['confirmPassword'],\r\n})\r\n\r\nexport type PasswordResetConfirmInput = z.infer<typeof passwordResetConfirmSchema>\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAMO,MAAM,eAAe,mOAAC,CAAC,MAAM,CAAC;IACnC,OAAO,mOAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA4B,GAC9C,KAAK,CAAC;QAAE,SAAS;IAAqC;IACzD,UAAU,mOAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GACrC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmC;AAC1D;AAQO,MAAM,eAAe,mOAAC,CAAC,MAAM,CAAC;IACnC,MAAM,mOAAC,CACJ,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsB,GACxC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsC;IAC3D,OAAO,mOAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA4B,GAC9C,KAAK,CAAC;QAAE,SAAS;IAAqC;IACzD,OAAO,mOAAC,CACL,MAAM,GACN,QAAQ,GACR,MAAM,CACL,CAAC,MAAQ,CAAC,OAAO,oBAAoB,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,MAC7D;QAAE,SAAS;IAAyD;IAExE,UAAU,mOAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GACrC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmC;IACxD,iBAAiB,mOAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA2B;AAC3E,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAQO,MAAM,6BAA6B,mOAAC,CAAC,MAAM,CAAC;IACjD,OAAO,mOAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA4B,GAC9C,KAAK,CAAC;QAAE,SAAS;IAAqC;AAC3D;AAQO,MAAM,6BAA6B,mOAAC,CAAC,MAAM,CAAC;IACjD,OAAO,mOAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB;IACvD,UAAU,mOAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GACrC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmC;IACxD,iBAAiB,mOAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA2B;AAC3E,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/utils/password.ts"],"sourcesContent":["import { hash, compare } from \"bcryptjs\";\r\n\r\nconst SALT_ROUNDS = 10;\r\n\r\n/**\r\n * Hash a plain-text password using bcryptjs.\r\n * @param password - Plain-text password\r\n * @returns Hashed password string\r\n */\r\nexport async function hashPassword(password: string): Promise<string> {\r\n  return hash(password, SALT_ROUNDS);\r\n}\r\n\r\n/**\r\n * Verify a plain-text password against a hashed password.\r\n * @param password - Plain-text password\r\n * @param hashedPassword - Hashed password from database\r\n * @returns True if passwords match, false otherwise\r\n */\r\nexport async function verifyPassword(\r\n  password: string,\r\n  hashedPassword: string\r\n): Promise<boolean> {\r\n  return compare(password, hashedPassword);\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,cAAc;AAOb,eAAe,aAAa,QAAgB;IACjD,OAAO,IAAA,8LAAI,EAAC,UAAU;AACxB;AAQO,eAAe,eACpB,QAAgB,EAChB,cAAsB;IAEtB,OAAO,IAAA,iMAAO,EAAC,UAAU;AAC3B","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/auth.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { signInSchema } from \"@/lib/validation/auth\";\r\nimport { verifyPassword } from \"@/lib/utils/password\";\r\nimport { ZodError } from \"zod\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  session: { strategy: \"jwt\" },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"E-posta\", type: \"email\" },\r\n        password: { label: \"Şifre\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        try {\r\n          // Validate input with Zod\r\n          const { email, password } = await signInSchema.parseAsync(\r\n            credentials\r\n          );\r\n\r\n          // Find user by email\r\n          const user = await prisma.user.findUnique({\r\n            where: { email },\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true,\r\n              phone: true,\r\n              role: true,\r\n              password_hash: true,\r\n            },\r\n          });\r\n\r\n          if (!user) {\r\n            throw new Error(\"Geçersiz e-posta veya şifre\");\r\n          }\r\n\r\n          // Verify password\r\n          const isValid = await verifyPassword(password, user.password_hash);\r\n\r\n          if (!isValid) {\r\n            throw new Error(\"Geçersiz e-posta veya şifre\");\r\n          }\r\n\r\n          // Return user object without password_hash\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            phone: user.phone,\r\n            role: user.role,\r\n          };\r\n        } catch (error) {\r\n          if (error instanceof ZodError) {\r\n            // Invalid credentials format\r\n            return null;\r\n          }\r\n          // Re-throw other errors\r\n          throw error;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      // On first sign-in, add user role to token\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n        token.phone = user.phone;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      // Add user ID and role to session\r\n      if (token) {\r\n        session.user.id = token.id as string;\r\n        session.user.role = token.role as string;\r\n        session.user.phone = token.phone as string | null;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n};\r\n\r\nexport default NextAuth(authOptions);\r\n\r\n// Helper to get session in server components (Next.js App Router)\r\nexport { getServerSession } from \"next-auth/next\";\r\n\r\n// Extend NextAuth types for TypeScript\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      id: string;\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n      phone?: string | null;\r\n      role: string;\r\n    };\r\n  }\r\n\r\n  interface User {\r\n    id: string;\r\n    role: string;\r\n    phone?: string | null;\r\n  }\r\n}\r\n\r\ndeclare module \"next-auth/jwt\" {\r\n  interface JWT {\r\n    id: string;\r\n    role: string;\r\n    phone?: string | null;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAuFA,kEAAkE;AAClE;;;;;;;AAtFA,MAAM,SAAS,IAAI,6IAAY;AAExB,MAAM,cAA+B;IAC1C,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,+QAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAW,MAAM;gBAAQ;gBACzC,UAAU;oBAAE,OAAO;oBAAS,MAAM;gBAAW;YAC/C;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,0BAA0B;oBAC1B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,yIAAY,CAAC,UAAU,CACvD;oBAGF,qBAAqB;oBACrB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BAAE;wBAAM;wBACf,QAAQ;4BACN,IAAI;4BACJ,MAAM;4BACN,OAAO;4BACP,OAAO;4BACP,MAAM;4BACN,eAAe;wBACjB;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,kBAAkB;oBAClB,MAAM,UAAU,MAAM,IAAA,0IAAc,EAAC,UAAU,KAAK,aAAa;oBAEjE,IAAI,CAAC,SAAS;wBACZ,MAAM,IAAI,MAAM;oBAClB;oBAEA,2CAA2C;oBAC3C,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACjB;gBACF,EAAE,OAAO,OAAO;oBACd,IAAI,iBAAiB,2MAAQ,EAAE;wBAC7B,6BAA6B;wBAC7B,OAAO;oBACT;oBACA,wBAAwB;oBACxB,MAAM;gBACR;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,2CAA2C;YAC3C,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,kCAAkC;YAClC,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;IACF;AACF;uCAEe,IAAA,4PAAQ,EAAC","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/auth/abilities.ts"],"sourcesContent":["import { Role } from \"@prisma/client\";\r\n\r\n/**\r\n * Permission types for RBAC system.\r\n * Each permission represents a specific action in the system.\r\n */\r\nexport type Permission =\r\n  // Appointment permissions\r\n  | \"appointment:create\"\r\n  | \"appointment:read\"\r\n  | \"appointment:read:all\"\r\n  | \"appointment:update\"\r\n  | \"appointment:update:all\"\r\n  | \"appointment:approve\"\r\n  | \"appointment:cancel\"\r\n  | \"appointment:delete\"\r\n  // Service permissions\r\n  | \"service:create\"\r\n  | \"service:read\"\r\n  | \"service:update\"\r\n  | \"service:delete\"\r\n  // User permissions\r\n  | \"user:create\"\r\n  | \"user:read\"\r\n  | \"user:read:all\"\r\n  | \"user:update\"\r\n  | \"user:update:all\"\r\n  | \"user:delete\"\r\n  // Review permissions\r\n  | \"review:create\"\r\n  | \"review:read\"\r\n  | \"review:update:own\"\r\n  | \"review:update:all\"\r\n  | \"review:delete:own\"\r\n  | \"review:delete:all\"\r\n  // Gallery permissions\r\n  | \"gallery:create\"\r\n  | \"gallery:read\"\r\n  | \"gallery:update\"\r\n  | \"gallery:delete\"\r\n  // Payment permissions\r\n  | \"payment:create\"\r\n  | \"payment:read\"\r\n  | \"payment:read:all\"\r\n  | \"payment:update\"\r\n  | \"payment:delete\"\r\n  // Report permissions\r\n  | \"report:financial:read\"\r\n  | \"report:operational:read\"\r\n  | \"report:export\"\r\n  // Settings permissions\r\n  | \"settings:read\"\r\n  | \"settings:update\"\r\n  // Staff permissions\r\n  | \"staff:read\"\r\n  | \"staff:create\"\r\n  | \"staff:update\"\r\n  | \"staff:delete\"\r\n  | \"staff:invite\"\r\n  // Working hours permissions\r\n  | \"working-hours:read\"\r\n  | \"working-hours:update\"\r\n  // Notification permissions\r\n  | \"notification:read\"\r\n  | \"notification:send\"\r\n  | \"notification:send:all\";\r\n\r\n/**\r\n * Role-to-permissions mapping.\r\n * Defines which permissions each role has access to.\r\n *\r\n * ADMIN: Full access to all features\r\n * STAFF: Can manage appointments, payments, view reports, limited user management\r\n * CUSTOMER: Can create appointments, view own data, create reviews\r\n */\r\nexport const rolePermissions: Record<Role, Permission[]> = {\r\n  [Role.ADMIN]: [\r\n    // Appointments\r\n    \"appointment:create\",\r\n    \"appointment:read\",\r\n    \"appointment:read:all\",\r\n    \"appointment:update\",\r\n    \"appointment:update:all\",\r\n    \"appointment:approve\",\r\n    \"appointment:cancel\",\r\n    \"appointment:delete\",\r\n    // Services\r\n    \"service:create\",\r\n    \"service:read\",\r\n    \"service:update\",\r\n    \"service:delete\",\r\n    // Users\r\n    \"user:create\",\r\n    \"user:read\",\r\n    \"user:read:all\",\r\n    \"user:update\",\r\n    \"user:update:all\",\r\n    \"user:delete\",\r\n    // Reviews\r\n    \"review:create\",\r\n    \"review:read\",\r\n    \"review:update:own\",\r\n    \"review:update:all\",\r\n    \"review:delete:own\",\r\n    \"review:delete:all\",\r\n    // Gallery\r\n    \"gallery:create\",\r\n    \"gallery:read\",\r\n    \"gallery:update\",\r\n    \"gallery:delete\",\r\n    // Payments\r\n    \"payment:create\",\r\n    \"payment:read\",\r\n    \"payment:read:all\",\r\n    \"payment:update\",\r\n    \"payment:delete\",\r\n    // Reports\r\n    \"report:financial:read\",\r\n    \"report:operational:read\",\r\n    \"report:export\",\r\n    // Settings\r\n    \"settings:read\",\r\n    \"settings:update\",\r\n    // Staff\r\n    \"staff:read\",\r\n    \"staff:create\",\r\n    \"staff:update\",\r\n    \"staff:delete\",\r\n    \"staff:invite\",\r\n    // Working hours\r\n    \"working-hours:read\",\r\n    \"working-hours:update\",\r\n    // Notifications\r\n    \"notification:read\",\r\n    \"notification:send\",\r\n    \"notification:send:all\",\r\n  ],\r\n\r\n  [Role.STAFF]: [\r\n    // Appointments\r\n    \"appointment:create\",\r\n    \"appointment:read\",\r\n    \"appointment:read:all\",\r\n    \"appointment:update\",\r\n    \"appointment:update:all\",\r\n    \"appointment:approve\",\r\n    \"appointment:cancel\",\r\n    // Services\r\n    \"service:read\",\r\n    // Users\r\n    \"user:read\",\r\n    // Reviews\r\n    \"review:read\",\r\n    // Gallery\r\n    \"gallery:read\",\r\n    // Payments\r\n    \"payment:create\",\r\n    \"payment:read\",\r\n    \"payment:read:all\",\r\n    \"payment:update\",\r\n    // Reports\r\n    \"report:financial:read\",\r\n    \"report:operational:read\",\r\n    \"report:export\",\r\n    // Settings\r\n    \"settings:read\",\r\n    // Staff\r\n    \"staff:read\",\r\n    // Working hours\r\n    \"working-hours:read\",\r\n    // Notifications\r\n    \"notification:read\",\r\n    \"notification:send\",\r\n  ],\r\n\r\n  [Role.CUSTOMER]: [\r\n    // Appointments\r\n    \"appointment:create\",\r\n    \"appointment:read\", // Own appointments only\r\n    \"appointment:cancel\", // Own appointments only, within 12-hour window\r\n    // Services\r\n    \"service:read\",\r\n    // Users\r\n    \"user:read\", // Own profile only\r\n    \"user:update\", // Own profile only\r\n    // Reviews\r\n    \"review:create\",\r\n    \"review:read\",\r\n    \"review:update:own\",\r\n    \"review:delete:own\",\r\n    // Gallery\r\n    \"gallery:read\",\r\n    // Payments\r\n    \"payment:read\", // Own payments only\r\n    // Notifications\r\n    \"notification:read\", // Own notifications only\r\n  ],\r\n};\r\n\r\n/**\r\n * Check if a role has a specific permission.\r\n * @param role - User's role\r\n * @param permission - Permission to check\r\n * @returns True if role has permission, false otherwise\r\n */\r\nexport function hasPermission(role: Role, permission: Permission): boolean {\r\n  return rolePermissions[role]?.includes(permission) ?? false;\r\n}\r\n\r\n/**\r\n * Check if a user has multiple permissions (AND logic).\r\n * @param role - User's role\r\n * @param permissions - Array of permissions to check\r\n * @returns True if role has ALL permissions, false otherwise\r\n */\r\nexport function hasAllPermissions(\r\n  role: Role,\r\n  permissions: Permission[]\r\n): boolean {\r\n  return permissions.every((permission) => hasPermission(role, permission));\r\n}\r\n\r\n/**\r\n * Check if a user has at least one of the given permissions (OR logic).\r\n * @param role - User's role\r\n * @param permissions - Array of permissions to check\r\n * @returns True if role has AT LEAST ONE permission, false otherwise\r\n */\r\nexport function hasAnyPermission(\r\n  role: Role,\r\n  permissions: Permission[]\r\n): boolean {\r\n  return permissions.some((permission) => hasPermission(role, permission));\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AA2EO,MAAM,kBAA8C;IACzD,CAAC,qIAAI,CAAC,KAAK,CAAC,EAAE;QACZ,eAAe;QACf;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,WAAW;QACX;QACA;QACA;QACA;QACA,QAAQ;QACR;QACA;QACA;QACA;QACA;QACA;QACA,UAAU;QACV;QACA;QACA;QACA;QACA;QACA;QACA,UAAU;QACV;QACA;QACA;QACA;QACA,WAAW;QACX;QACA;QACA;QACA;QACA;QACA,UAAU;QACV;QACA;QACA;QACA,WAAW;QACX;QACA;QACA,QAAQ;QACR;QACA;QACA;QACA;QACA;QACA,gBAAgB;QAChB;QACA;QACA,gBAAgB;QAChB;QACA;QACA;KACD;IAED,CAAC,qIAAI,CAAC,KAAK,CAAC,EAAE;QACZ,eAAe;QACf;QACA;QACA;QACA;QACA;QACA;QACA;QACA,WAAW;QACX;QACA,QAAQ;QACR;QACA,UAAU;QACV;QACA,UAAU;QACV;QACA,WAAW;QACX;QACA;QACA;QACA;QACA,UAAU;QACV;QACA;QACA;QACA,WAAW;QACX;QACA,QAAQ;QACR;QACA,gBAAgB;QAChB;QACA,gBAAgB;QAChB;QACA;KACD;IAED,CAAC,qIAAI,CAAC,QAAQ,CAAC,EAAE;QACf,eAAe;QACf;QACA;QACA;QACA,WAAW;QACX;QACA,QAAQ;QACR;QACA;QACA,UAAU;QACV;QACA;QACA;QACA;QACA,UAAU;QACV;QACA,WAAW;QACX;QACA,gBAAgB;QAChB;KACD;AACH;AAQO,SAAS,cAAc,IAAU,EAAE,UAAsB;IAC9D,OAAO,eAAe,CAAC,KAAK,EAAE,SAAS,eAAe;AACxD;AAQO,SAAS,kBACd,IAAU,EACV,WAAyB;IAEzB,OAAO,YAAY,KAAK,CAAC,CAAC,aAAe,cAAc,MAAM;AAC/D;AAQO,SAAS,iBACd,IAAU,EACV,WAAyB;IAEzB,OAAO,YAAY,IAAI,CAAC,CAAC,aAAe,cAAc,MAAM;AAC9D","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/auth/guards.ts"],"sourcesContent":["import { Role } from \"@prisma/client\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport {\r\n  hasPermission,\r\n  hasAllPermissions,\r\n  hasAnyPermission,\r\n  type Permission,\r\n} from \"./abilities\";\r\n\r\n/**\r\n * Error thrown when user lacks required permissions.\r\n */\r\nexport class UnauthorizedError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"UnauthorizedError\";\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current session or throw if not authenticated.\r\n * @throws UnauthorizedError if no session exists\r\n */\r\nexport async function requireAuth() {\r\n  const session = await getServerSession(authOptions);\r\n\r\n  if (!session || !session.user) {\r\n    throw new UnauthorizedError(\"Bu işlem için giriş yapmalısınız\");\r\n  }\r\n\r\n  return session;\r\n}\r\n\r\n/**\r\n * Require user to have a specific role.\r\n * @param allowedRoles - Single role or array of roles\r\n * @throws UnauthorizedError if user role doesn't match\r\n */\r\nexport async function requireRole(allowedRoles: Role | Role[]) {\r\n  const session = await requireAuth();\r\n  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];\r\n\r\n  if (!roles.includes(session.user.role as Role)) {\r\n    throw new UnauthorizedError(\r\n      \"Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır\"\r\n    );\r\n  }\r\n\r\n  return session;\r\n}\r\n\r\n/**\r\n * Require user to have a specific permission.\r\n * @param permission - Permission to check\r\n * @throws UnauthorizedError if user lacks permission\r\n */\r\nexport async function requirePermission(permission: Permission) {\r\n  const session = await requireAuth();\r\n\r\n  if (!hasPermission(session.user.role as Role, permission)) {\r\n    throw new UnauthorizedError(\r\n      \"Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır\"\r\n    );\r\n  }\r\n\r\n  return session;\r\n}\r\n\r\n/**\r\n * Require user to have ALL of the specified permissions.\r\n * @param permissions - Array of permissions to check (AND logic)\r\n * @throws UnauthorizedError if user lacks any permission\r\n */\r\nexport async function requireAllPermissions(permissions: Permission[]) {\r\n  const session = await requireAuth();\r\n\r\n  if (!hasAllPermissions(session.user.role as Role, permissions)) {\r\n    throw new UnauthorizedError(\r\n      \"Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır\"\r\n    );\r\n  }\r\n\r\n  return session;\r\n}\r\n\r\n/**\r\n * Require user to have AT LEAST ONE of the specified permissions.\r\n * @param permissions - Array of permissions to check (OR logic)\r\n * @throws UnauthorizedError if user lacks all permissions\r\n */\r\nexport async function requireAnyPermission(permissions: Permission[]) {\r\n  const session = await requireAuth();\r\n\r\n  if (!hasAnyPermission(session.user.role as Role, permissions)) {\r\n    throw new UnauthorizedError(\r\n      \"Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır\"\r\n    );\r\n  }\r\n\r\n  return session;\r\n}\r\n\r\n/**\r\n * Check if current user is ADMIN.\r\n * @throws UnauthorizedError if user is not admin\r\n */\r\nexport async function requireAdmin() {\r\n  return requireRole(Role.ADMIN);\r\n}\r\n\r\n/**\r\n * Check if current user is STAFF or ADMIN.\r\n * @throws UnauthorizedError if user is neither staff nor admin\r\n */\r\nexport async function requireStaffOrAdmin() {\r\n  return requireRole([Role.STAFF, Role.ADMIN]);\r\n}\r\n\r\n/**\r\n * Check if current user can access a specific user's data.\r\n * Admins can access any user, others can only access their own data.\r\n * @param userId - ID of the user whose data is being accessed\r\n * @throws UnauthorizedError if user cannot access the data\r\n */\r\nexport async function requireOwnershipOrAdmin(userId: string) {\r\n  const session = await requireAuth();\r\n\r\n  const isAdmin = session.user.role === Role.ADMIN;\r\n  const isOwner = session.user.id === userId;\r\n\r\n  if (!isAdmin && !isOwner) {\r\n    throw new UnauthorizedError(\"Bu bilgilere erişim yetkiniz bulunmamaktadır\");\r\n  }\r\n\r\n  return session;\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AAUO,MAAM,0BAA0B;IACrC,YAAY,OAAe,CAAE;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAMO,eAAe;IACpB,MAAM,UAAU,MAAM,IAAA,6QAAgB,EAAC,0IAAW;IAElD,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;QAC7B,MAAM,IAAI,kBAAkB;IAC9B;IAEA,OAAO;AACT;AAOO,eAAe,YAAY,YAA2B;IAC3D,MAAM,UAAU,MAAM;IACtB,MAAM,QAAQ,MAAM,OAAO,CAAC,gBAAgB,eAAe;QAAC;KAAa;IAEzE,IAAI,CAAC,MAAM,QAAQ,CAAC,QAAQ,IAAI,CAAC,IAAI,GAAW;QAC9C,MAAM,IAAI,kBACR;IAEJ;IAEA,OAAO;AACT;AAOO,eAAe,kBAAkB,UAAsB;IAC5D,MAAM,UAAU,MAAM;IAEtB,IAAI,CAAC,IAAA,yIAAa,EAAC,QAAQ,IAAI,CAAC,IAAI,EAAU,aAAa;QACzD,MAAM,IAAI,kBACR;IAEJ;IAEA,OAAO;AACT;AAOO,eAAe,sBAAsB,WAAyB;IACnE,MAAM,UAAU,MAAM;IAEtB,IAAI,CAAC,IAAA,6IAAiB,EAAC,QAAQ,IAAI,CAAC,IAAI,EAAU,cAAc;QAC9D,MAAM,IAAI,kBACR;IAEJ;IAEA,OAAO;AACT;AAOO,eAAe,qBAAqB,WAAyB;IAClE,MAAM,UAAU,MAAM;IAEtB,IAAI,CAAC,IAAA,4IAAgB,EAAC,QAAQ,IAAI,CAAC,IAAI,EAAU,cAAc;QAC7D,MAAM,IAAI,kBACR;IAEJ;IAEA,OAAO;AACT;AAMO,eAAe;IACpB,OAAO,YAAY,qIAAI,CAAC,KAAK;AAC/B;AAMO,eAAe;IACpB,OAAO,YAAY;QAAC,qIAAI,CAAC,KAAK;QAAE,qIAAI,CAAC,KAAK;KAAC;AAC7C;AAQO,eAAe,wBAAwB,MAAc;IAC1D,MAAM,UAAU,MAAM;IAEtB,MAAM,UAAU,QAAQ,IAAI,CAAC,IAAI,KAAK,qIAAI,CAAC,KAAK;IAChD,MAAM,UAAU,QAAQ,IAAI,CAAC,EAAE,KAAK;IAEpC,IAAI,CAAC,WAAW,CAAC,SAAS;QACxB,MAAM,IAAI,kBAAkB;IAC9B;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/app/%28admin%29/randevular/appointments-list.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AppointmentsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppointmentsList() from the server but AppointmentsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(admin)/randevular/appointments-list.tsx <module evaluation>\",\n    \"AppointmentsList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,uXAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,8EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 542, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/app/%28admin%29/randevular/appointments-list.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AppointmentsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppointmentsList() from the server but AppointmentsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(admin)/randevular/appointments-list.tsx\",\n    \"AppointmentsList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,uXAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,0DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/app/%28admin%29/randevular/page.tsx"],"sourcesContent":["import { PrismaClient, AppointmentStatus } from \"@prisma/client\";\r\nimport { requireStaffOrAdmin } from \"@/lib/auth/guards\";\r\nimport { AppointmentsList } from \"./appointments-list\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const metadata = {\r\n  title: \"Randevular - Yıldız Kuaförü Admin\",\r\n  description: \"Randevu yönetimi\",\r\n};\r\n\r\nasync function getAppointments() {\r\n  const appointments = await prisma.appointment.findMany({\r\n    where: {\r\n      status: {\r\n        in: [\r\n          AppointmentStatus.PENDING,\r\n          AppointmentStatus.APPROVED,\r\n          AppointmentStatus.CANCELLED,\r\n        ],\r\n      },\r\n    },\r\n    include: {\r\n      appointment_services: {\r\n        include: {\r\n          service: true,\r\n        },\r\n      },\r\n      assigned_staff: {\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          phone: true,\r\n        },\r\n      },\r\n      customer_user: {\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          phone: true,\r\n        },\r\n      },\r\n    },\r\n    orderBy: [{ date: \"asc\" }, { time: \"asc\" }],\r\n  });\r\n\r\n  return appointments;\r\n}\r\n\r\nasync function getStaff() {\r\n  const staff = await prisma.user.findMany({\r\n    where: {\r\n      role: {\r\n        in: [\"STAFF\", \"ADMIN\"],\r\n      },\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      role: true,\r\n    },\r\n  });\r\n\r\n  return staff;\r\n}\r\n\r\nexport default async function RandevularPage() {\r\n  await requireStaffOrAdmin();\r\n\r\n  const [appointments, staff] = await Promise.all([\r\n    getAppointments(),\r\n    getStaff(),\r\n  ]);\r\n\r\n  // Serialize Decimal values for client component\r\n  const appointmentsForClient = appointments.map((appointment) => ({\r\n    ...appointment,\r\n    appointment_services: appointment.appointment_services.map((as) => ({\r\n      ...as,\r\n      price_try_at_booking: Number(as.price_try_at_booking),\r\n      service: {\r\n        ...as.service,\r\n        price_try: Number(as.service.price_try),\r\n      },\r\n    })),\r\n  }));\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Randevular</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Bekleyen ve onaylanmış randevuları yönetin\r\n          </p>\r\n        </div>\r\n\r\n        <AppointmentsList appointments={appointmentsForClient} staff={staff} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAExB,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEA,eAAe;IACb,MAAM,eAAe,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC;QACrD,OAAO;YACL,QAAQ;gBACN,IAAI;oBACF,kJAAiB,CAAC,OAAO;oBACzB,kJAAiB,CAAC,QAAQ;oBAC1B,kJAAiB,CAAC,SAAS;iBAC5B;YACH;QACF;QACA,SAAS;YACP,sBAAsB;gBACpB,SAAS;oBACP,SAAS;gBACX;YACF;YACA,gBAAgB;gBACd,QAAQ;oBACN,IAAI;oBACJ,MAAM;oBACN,OAAO;gBACT;YACF;YACA,eAAe;gBACb,QAAQ;oBACN,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,OAAO;gBACT;YACF;QACF;QACA,SAAS;YAAC;gBAAE,MAAM;YAAM;YAAG;gBAAE,MAAM;YAAM;SAAE;IAC7C;IAEA,OAAO;AACT;AAEA,eAAe;IACb,MAAM,QAAQ,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvC,OAAO;YACL,MAAM;gBACJ,IAAI;oBAAC;oBAAS;iBAAQ;YACxB;QACF;QACA,QAAQ;YACN,IAAI;YACJ,MAAM;YACN,MAAM;QACR;IACF;IAEA,OAAO;AACT;AAEe,eAAe;IAC5B,MAAM,IAAA,4IAAmB;IAEzB,MAAM,CAAC,cAAc,MAAM,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC9C;QACA;KACD;IAED,gDAAgD;IAChD,MAAM,wBAAwB,aAAa,GAAG,CAAC,CAAC,cAAgB,CAAC;YAC/D,GAAG,WAAW;YACd,sBAAsB,YAAY,oBAAoB,CAAC,GAAG,CAAC,CAAC,KAAO,CAAC;oBAClE,GAAG,EAAE;oBACL,sBAAsB,OAAO,GAAG,oBAAoB;oBACpD,SAAS;wBACP,GAAG,GAAG,OAAO;wBACb,WAAW,OAAO,GAAG,OAAO,CAAC,SAAS;oBACxC;gBACF,CAAC;QACH,CAAC;IAED,qBACE,6VAAC;QAAI,WAAU;kBACb,cAAA,6VAAC;YAAI,WAAU;;8BACb,6VAAC;oBAAI,WAAU;;sCACb,6VAAC;4BAAG,WAAU;sCAAmC;;;;;;sCACjD,6VAAC;4BAAE,WAAU;sCAAqB;;;;;;;;;;;;8BAKpC,6VAAC,2KAAgB;oBAAC,cAAc;oBAAuB,OAAO;;;;;;;;;;;;;;;;;AAItE","debugId":null}}]
}
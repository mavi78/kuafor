{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/validation/auth.ts"],"sourcesContent":["import { z } from 'zod'\r\n\r\n/**\r\n * Sign-in schema with email and password validation.\r\n * Used for login forms.\r\n */\r\nexport const signInSchema = z.object({\r\n  email: z\r\n    .string()\r\n    .min(1, { message: 'E-posta adresi gereklidir' })\r\n    .email({ message: 'Geçerli bir e-posta adresi giriniz' }),\r\n  password: z\r\n    .string()\r\n    .min(1, { message: 'Şifre gereklidir' })\r\n    .min(6, { message: 'Şifre en az 6 karakter olmalıdır' }),\r\n})\r\n\r\nexport type SignInInput = z.infer<typeof signInSchema>\r\n\r\n/**\r\n * Sign-up schema with name, email, phone, and password validation.\r\n * Used for customer self-registration.\r\n */\r\nexport const signUpSchema = z.object({\r\n  name: z\r\n    .string()\r\n    .min(1, { message: 'Ad soyad gereklidir' })\r\n    .min(2, { message: 'Ad soyad en az 2 karakter olmalıdır' }),\r\n  email: z\r\n    .string()\r\n    .min(1, { message: 'E-posta adresi gereklidir' })\r\n    .email({ message: 'Geçerli bir e-posta adresi giriniz' }),\r\n  phone: z\r\n    .string()\r\n    .optional()\r\n    .refine(\r\n      (val) => !val || /^(\\+90|0)?5\\d{9}$/.test(val.replace(/\\s/g, '')),\r\n      { message: 'Geçerli bir telefon numarası giriniz (örn: 5551234567)' }\r\n    ),\r\n  password: z\r\n    .string()\r\n    .min(1, { message: 'Şifre gereklidir' })\r\n    .min(6, { message: 'Şifre en az 6 karakter olmalıdır' }),\r\n  confirmPassword: z.string().min(1, { message: 'Şifre tekrarı gereklidir' }),\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: 'Şifreler eşleşmiyor',\r\n  path: ['confirmPassword'],\r\n})\r\n\r\nexport type SignUpInput = z.infer<typeof signUpSchema>\r\n\r\n/**\r\n * Password reset request schema.\r\n * Used for initiating password reset flow.\r\n */\r\nexport const passwordResetRequestSchema = z.object({\r\n  email: z\r\n    .string()\r\n    .min(1, { message: 'E-posta adresi gereklidir' })\r\n    .email({ message: 'Geçerli bir e-posta adresi giriniz' }),\r\n})\r\n\r\nexport type PasswordResetRequestInput = z.infer<typeof passwordResetRequestSchema>\r\n\r\n/**\r\n * Password reset confirmation schema.\r\n * Used for completing password reset with token.\r\n */\r\nexport const passwordResetConfirmSchema = z.object({\r\n  token: z.string().min(1, { message: 'Token gereklidir' }),\r\n  password: z\r\n    .string()\r\n    .min(1, { message: 'Şifre gereklidir' })\r\n    .min(6, { message: 'Şifre en az 6 karakter olmalıdır' }),\r\n  confirmPassword: z.string().min(1, { message: 'Şifre tekrarı gereklidir' }),\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: 'Şifreler eşleşmiyor',\r\n  path: ['confirmPassword'],\r\n})\r\n\r\nexport type PasswordResetConfirmInput = z.infer<typeof passwordResetConfirmSchema>\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAMO,MAAM,eAAe,qOAAC,CAAC,MAAM,CAAC;IACnC,OAAO,qOAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA4B,GAC9C,KAAK,CAAC;QAAE,SAAS;IAAqC;IACzD,UAAU,qOAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GACrC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmC;AAC1D;AAQO,MAAM,eAAe,qOAAC,CAAC,MAAM,CAAC;IACnC,MAAM,qOAAC,CACJ,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsB,GACxC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsC;IAC3D,OAAO,qOAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA4B,GAC9C,KAAK,CAAC;QAAE,SAAS;IAAqC;IACzD,OAAO,qOAAC,CACL,MAAM,GACN,QAAQ,GACR,MAAM,CACL,CAAC,MAAQ,CAAC,OAAO,oBAAoB,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,MAC7D;QAAE,SAAS;IAAyD;IAExE,UAAU,qOAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GACrC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmC;IACxD,iBAAiB,qOAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA2B;AAC3E,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAQO,MAAM,6BAA6B,qOAAC,CAAC,MAAM,CAAC;IACjD,OAAO,qOAAC,CACL,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA4B,GAC9C,KAAK,CAAC;QAAE,SAAS;IAAqC;AAC3D;AAQO,MAAM,6BAA6B,qOAAC,CAAC,MAAM,CAAC;IACjD,OAAO,qOAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB;IACvD,UAAU,qOAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GACrC,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmC;IACxD,iBAAiB,qOAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA2B;AAC3E,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/utils/password.ts"],"sourcesContent":["import { hash, compare } from \"bcryptjs\";\r\n\r\nconst SALT_ROUNDS = 10;\r\n\r\n/**\r\n * Hash a plain-text password using bcryptjs.\r\n * @param password - Plain-text password\r\n * @returns Hashed password string\r\n */\r\nexport async function hashPassword(password: string): Promise<string> {\r\n  return hash(password, SALT_ROUNDS);\r\n}\r\n\r\n/**\r\n * Verify a plain-text password against a hashed password.\r\n * @param password - Plain-text password\r\n * @param hashedPassword - Hashed password from database\r\n * @returns True if passwords match, false otherwise\r\n */\r\nexport async function verifyPassword(\r\n  password: string,\r\n  hashedPassword: string\r\n): Promise<boolean> {\r\n  return compare(password, hashedPassword);\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,cAAc;AAOb,eAAe,aAAa,QAAgB;IACjD,OAAO,IAAA,gMAAI,EAAC,UAAU;AACxB;AAQO,eAAe,eACpB,QAAgB,EAChB,cAAsB;IAEtB,OAAO,IAAA,mMAAO,EAAC,UAAU;AAC3B","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/lib/auth.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { signInSchema } from \"@/lib/validation/auth\";\r\nimport { verifyPassword } from \"@/lib/utils/password\";\r\nimport { ZodError } from \"zod\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  session: { strategy: \"jwt\" },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"E-posta\", type: \"email\" },\r\n        password: { label: \"Şifre\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        try {\r\n          // Validate input with Zod\r\n          const { email, password } = await signInSchema.parseAsync(\r\n            credentials\r\n          );\r\n\r\n          // Find user by email\r\n          const user = await prisma.user.findUnique({\r\n            where: { email },\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true,\r\n              phone: true,\r\n              role: true,\r\n              password_hash: true,\r\n            },\r\n          });\r\n\r\n          if (!user) {\r\n            throw new Error(\"Geçersiz e-posta veya şifre\");\r\n          }\r\n\r\n          // Verify password\r\n          const isValid = await verifyPassword(password, user.password_hash);\r\n\r\n          if (!isValid) {\r\n            throw new Error(\"Geçersiz e-posta veya şifre\");\r\n          }\r\n\r\n          // Return user object without password_hash\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            phone: user.phone,\r\n            role: user.role,\r\n          };\r\n        } catch (error) {\r\n          if (error instanceof ZodError) {\r\n            // Invalid credentials format\r\n            return null;\r\n          }\r\n          // Re-throw other errors\r\n          throw error;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      // On first sign-in, add user role to token\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n        token.phone = user.phone;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      // Add user ID and role to session\r\n      if (token) {\r\n        session.user.id = token.id as string;\r\n        session.user.role = token.role as string;\r\n        session.user.phone = token.phone as string | null;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n};\r\n\r\nexport default NextAuth(authOptions);\r\n\r\n// Helper to get session in server components (Next.js App Router)\r\nexport { getServerSession } from \"next-auth/next\";\r\n\r\n// Extend NextAuth types for TypeScript\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      id: string;\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n      phone?: string | null;\r\n      role: string;\r\n    };\r\n  }\r\n\r\n  interface User {\r\n    id: string;\r\n    role: string;\r\n    phone?: string | null;\r\n  }\r\n}\r\n\r\ndeclare module \"next-auth/jwt\" {\r\n  interface JWT {\r\n    id: string;\r\n    role: string;\r\n    phone?: string | null;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAuFA,kEAAkE;AAClE;;;;;;;AAtFA,MAAM,SAAS,IAAI,6IAAY;AAExB,MAAM,cAA+B;IAC1C,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,iRAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAW,MAAM;gBAAQ;gBACzC,UAAU;oBAAE,OAAO;oBAAS,MAAM;gBAAW;YAC/C;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,0BAA0B;oBAC1B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,2IAAY,CAAC,UAAU,CACvD;oBAGF,qBAAqB;oBACrB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BAAE;wBAAM;wBACf,QAAQ;4BACN,IAAI;4BACJ,MAAM;4BACN,OAAO;4BACP,OAAO;4BACP,MAAM;4BACN,eAAe;wBACjB;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,kBAAkB;oBAClB,MAAM,UAAU,MAAM,IAAA,4IAAc,EAAC,UAAU,KAAK,aAAa;oBAEjE,IAAI,CAAC,SAAS;wBACZ,MAAM,IAAI,MAAM;oBAClB;oBAEA,2CAA2C;oBAC3C,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACjB;gBACF,EAAE,OAAO,OAAO;oBACd,IAAI,iBAAiB,6MAAQ,EAAE;wBAC7B,6BAA6B;wBAC7B,OAAO;oBACT;oBACA,wBAAwB;oBACxB,MAAM;gBACR;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,2CAA2C;YAC3C,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,kCAAkC;YAClC,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;IACF;AACF;uCAEe,IAAA,8PAAQ,EAAC","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///E:/kuafor/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth\";\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,8PAAQ,EAAC,4IAAW","debugId":null}}]
}